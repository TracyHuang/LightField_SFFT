 /******************************************
 * parameters regarding the initial method of gradient search method
 */
init_params : {

    /*
     * The manual initial position
     *
     * Default : empty
     */
    init_peaks = ();

    /*
     * The number of initial peaks
     *
     * Default: 0
     */
    num_init_peaks = 0;

    /*
     * The method to estimate the initial positions. 
     *
     * Default: INIT_METHOD::VOTING
     */
    method = "voting";

    /*
     * The soft power threshold. 
     *
     * Default : 1.0
     */
    soft_power_threshold = 1.0;

    /*
     * The hard power threshold. 
     *
     * Default : 0
     */
    hard_power_threshold = 0.0;

    /*
     * The maximum soft power threshold we can have. 
     * Since some voting algorithm is actively changing
     * this soft power threshold, we need to set a 
     * maximum
     *
     * Default: 1000
     */
    max_soft_power_threshold = 1000.0;

    /*
     * The maximum number of iterations we can have 
     * for the voting algorithm
     *
     * Default: 10
     */
    max_voting_iter = 1000;

    /*
     * The minimum step of increasing soft_power_threshold
     *
     * Default: 0.1
     */
    min_soft_threshold_step = 0.1;

    /*
     * Optunism: if the peak is not manually set, and if 
     * there are manually specified peaks,
     * compare the residue with the manually set peaks
     * if they are better, use the manually set peaks
     *
     * Default: 1
     */
    optimism = TRUE;

    /*
     * In voting, what is the threshold: 
     * i.e. to how many percentage of the buckets vote for this frequency
     * it should be between 0 and 1
     */
    voting_threshold = 1.0;
	
	/*
	 * Decide whether to use the result of last slice as a reference/estimation of the current slice
     */
    use_adjacent=TRUE;

	/*
     * Maximum number of new peaks that can be added in one shadow bucket detection iteration
     */
	added_peaks_num_threshold = 3;
	
	/**
	 * Minimum percentage of power a shadow bucket should have to be recognised as "real" missing peak
	 */
	min_shadow_power_threshold = 0.1;

	/**
     * Minimum ratio of value of new peak to have to be recognised as a "real" missing peak
     */
	min_value_ratio_threshold = 10;

};


/*****************************************************
 * parameters regarding controlling of the whole algorithm input and output
 */
control_params: {
        

    /*
     * The result file
     *
     * Default: y_sfft
     */
    result_file_prefix = "y_sfft";

    /*
     * The debugging file
     *
     * Default: result
     */
    debugging_file_prefix = "result";

    /*
     * The initial configuration file
     *
     * Default: init
     */
    init_file_prefix = "init";

    /*
     * The logging file appendix
     *
     * Default: log
     */
    logging_file_prefix = "log";

    /*
     * The input method
     *
     * Default: FILE_INPUT
     */
    input_method = "file_input";


    /*
     * The input file (if needed)
     *
     * Default: x
     */
    input_file_prefix = "z";

    /*
     * The input n3 (if needed)
     *
     * Default: 100
     */
    n3 = 1;

    /*
     * The input k (if needed)
     *
     * Default: 5
     */
    k = 5;

    /*
     * The input snr (if needed)
     *
     * Default: inf
     */
    snr = "inf";

    /*
     * The input min_distance (if needed)
     *
     * Default: 1
     */
    min_distance = 1.0;

    /*
     * The full fft file (if needed)
     *
     * Default: y_full.dat
     */
    full_file = "y_full.dat";

    /*
     * The ground truth debugging file (if needed)
     *
     * Default: ground_truth.debug
     */
    ground_truth_debugging = "ground_truth.debug";

    /*
     * Whether the verbos mode is on or not
     * 
     * Default: verbose
     */
    verbos_file_prefix = "verbose";

};

/*****************************************************
 * These parameters are for light field application
 */
lightfield_params: {

    /*
     * The size of pixel dimension one
     *
     * Default: 480
     */
    n_x = 512;

    /*
     * The size of pixel dimension two
     *
     * Default: 640
     */
    n_y = 512;

    /*
     * The thickness of the lightfield line. 
     * It depends on the perfectness of Lambertion reflection
     *
     * Default: 6
     */
    lam_thickness = 6;

    /*
     * This is to indicate that the camera dimension 
     * and the pixel dimension is consistent or not
     *
     * Default: 1
     */
    camera_pixel_consistent = TRUE;

    /*
     * Whether to impose the line-pattern (dimensionality-gap)
     * of lightfield data set
     *
     * Default: 1
     */
    impose_dim_gap = FALSE;

};


/*****************************************************
 * The followings are global parameters
 */

/**
 * The vertical dimension size
 *
 * Default: 15
 */
n_v = 17;

/**
 * The horizontal dimension size
 *
 * Default: 15
 */
n_h = 17;

/**
 * The number of filters
 *
 * Default: 0
 */
// filter params removed
//num_filters = 6;

/**
 * Specifying the size of filters, 
 * [w_v1, w_h1, w_v2, w_h2, ...]
 *
 * Default: empty
 */
// filter params removed
//ws = (17,1, 1,17, 17,1, 1,17, 1,17, 1,17);
//ws = (17, 1, 17, 1, 17, 1, 17, 1, 17, 1, 17, 1);

/**
 * Specifying the initial offset in time domain, 
 * [init_shift_v1, init_shift_h1, init_shift_v2, init_shift_h2, ...]
 *
 * Deafult: empty
 */
// filter params removed
//init_shifts = (0,0, 0,0, 0,16, 16,0, 0,0, -1,0) ;
//init_shifts = (0, 0, 0, 9, 0, 0, 0, 16, 0, 0, 0, 16);

/**
 * Specifying the number of time domain shifts, 
 * [shift_v1, shift_h1, shift_v2, shift_h2, ...]
 *
 * Default: empty
 */
// filter params removed
//shifts = (1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1);
//shifts = (1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1);

/**
 * Specifying the permuation matrix, 
 * [a1, b1, c1, d1, a2, b2, c2, d3, ...]
 *
 * Default: empty
 */
// filter params removed
//perm_matrices = (1,0,0,1, 1,0,0,1, 1,0,0,1, 1,0,0,1, 1,1,16,0, 1,1,1,0);
//perm_matrices = (1, 16, 1, 1, 8, 8, 7, 8, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0);

/**
 * Specifying the frequency offset
 * [freq_offset_v1, freq_offset_h1, freq_offset_v2, freq_offset_h2, ...]
 *
 * Default: empty
 */
//freq_offsets = (0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);


// start of projection slice params

// The number of projection slices in the program ie. the number of projection lines in the program
num_projection_lines = 6;

/**
 * Specofyong the slopes and offsets of each projection line
 * [a1, b1, c1, d1, a2, b2, c2, d2, ...]
 */
// here we use 2 horizontal and 2 vertical lines to cover the area
//here we use random one {3, 5, 2, 9} {7, 3, 6, 1} {1, 6, 4, 4} {3, 8, 4, 3} {3, 7, 8, 3} {7, 7, 9, 9}
projection_matrices = (3, 5, 2, 9, 7, 3, 6, 1, 1, 6, 4, 4, 3, 8, 4, 3, 3, 7, 8, 3, 7, 7, 9, 9);

/**
 * Positions that holds the sample vlues
 */
sample_pos = (5 , 9 , 8 , 11 , 11 , 13 , 14 , 15 , 0 , 0 , 3 , 2 , 6 , 4 , 9 , 6 , 12 , 8 , 15 , 10 , 1 , 12 , 4 , 14 , 7 , 16 , 10 , 1 , 13 , 3 , 16 , 5 , 2 , 7 , 3 , 1 , 10 , 7 , 0 , 13 , 7 , 2 , 14 , 8 , 11 , 3 , 1 , 9 , 8 , 15 , 15 , 4 , 5 , 10 , 12 , 16 , 2 , 5 , 9 , 11 , 16 , 0 , 6 , 6 , 13 , 12 , 7 , 8 , 8 , 12 , 9 , 16 , 10 , 3 , 11 , 7 , 12 , 11 , 13 , 15 , 14 , 2 , 15 , 6 , 16 , 10 , 0 , 14 , 1 , 1 , 3 , 9 , 4 , 13 , 5 , 0 , 8 , 3 , 14 , 11 , 0 , 15 , 9 , 10 , 12 , 14 , 15 , 1 , 1 , 5 , 4 , 9 , 7 , 13 , 10 , 0 , 13 , 4 , 16 , 8 , 2 , 12 , 5 , 16 , 7 , 3 , 10 , 11 , 13 , 2 , 2 , 1 , 8 , 0 , 11 , 8 , 14 , 16 , 0 , 7 , 3 , 15 , 9 , 14 , 12 , 5 , 15 , 13 , 1 , 4 , 4 , 12 , 7 , 9 , 14 , 1 , 4 , 10 , 11 , 2 , 1 , 11 , 15 , 12 , 5 , 4 , 12 , 13 , 16 , 6 , 6 , 15 , 13 , 7 , 3 , 16 , 10 , 8);

/**
 * Number of positions that we want to use as samples
 */
num_samples = 89;

/**
 * The maximum number of iterations
 *
 * Default: 100
 */
max_iter = 100;

/**
 * Which method should use
 *
 * Default: GRAD_METHOD::GRADIENT
 */
method = "gradient";

/**
 * Whether the subtract_and_shift process is enabled. 
 *
 * Default: false
 */
subtract_and_shift_enabled = FALSE;

/**
 * Should we commit the change step by step, 
 * or commit them all at once at the end
 *
 * Default: false
 */
commit_step_by_step = FALSE;

/**
 * The computational tolerance
 *
 * Default: 1e-5
 */
tolerance = 1e-5;

/**
 * When calculating gradient, the delta distance
 *
 * Default: 0.01
 */
delta = 0.01;

/**
 * When doing single gradient, the update step
 *
 * Default: 0.01
 */
step = 0.01;

/**
 * In exhaustive search, the range of the search
 *
 * Default: 0.1
 */
range = 0.1;

/**
 * In exhaustive search, the step within the range
 *
 * Default: 0.01
 */
epsilon = 0.01;

/**
 * The minimum peak distance that is allowed
 *
 * Default : 0.05
 */
min_peak_distance = 0.05;

/**
 * The tolerance of residue increase when merging peaks
 *
 * Default: 2
 */
amend_peak_tolerance = 2.0;

/**
 * The size of the residue window
 *
 * Default: 10
 */
residue_window_size = 10;

/**
 * The "noticable change" threshold
 *
 * If change is smaller than that percentage, we think the algorithm
 * converges
 *
 * Default: 0.05
 */
noticable_change = 0.05;

/**
 * The threshold of difference in power
 * This is used by Gradient::checkEst()
 *
 * Default: 0.5
 */
power_diff_threshold = 0.5;

/**
 * The maximal number of changes allowed in Gradient::checkEst()
 *
 * Default: 1
 */
max_change = 1;

/**
 * The fraction of largest bucket power, such that any bucket
 * whose power is larger than that is a reasonble bucket
 *
 * Default: 0.8
 */
reasonable_bucket_power = 0.8;

/**
 * The minimal peak distance when trying to insert or remove peak. 
 * Used in Gradient::checkEst()
 *
 * Default: 0.5
 */
checkest_min_distance = 0.5;

/**
 * Whether we fix the time domain samples
 *
 * Default: 0
 */
fix_time_samples = FALSE;

/**
 * If the solution is way larger than the maximum bucket, 
 * we say that it is singular. This is the threshold
 *
 * Default: 100
 */
scaling_threshold = 100;

/**
 * Whether we check the shadow bucket and do the splitting or not
 * Default: TRUE
 */
check_est = TRUE;





